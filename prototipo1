#include <iostream>
#include <fstream>
#include <cstdlib>
using namespace std;

void ubicarBarcos(char matriz[][10], const string &color);
int posicionamientoBarcos(char matriz[][10], int tam, char nombre, int q, int x, int y, int v, bool h, const string &color);
int atacar(char matriz1[][10], char matriz2[][10], char matriz1_ofensiva[][10], char matriz2_ofensiva[][10], int &turno);
void imprimirMatriz(char matriz[][10], const string &color);
void guardarPartida(const string &nombreJugador1, const string &nombreJugador2, char matriz1[][10], char matriz2[][10], int turno);
bool cargarPartida(string &nombreJugador1, string &nombreJugador2, char matriz1[][10], char matriz2[][10], int &turno);
void guardarMovimiento(const string &nombreJugador1, const string &nombreJugador2, char matriz1[][10], char matriz2[][10], int turno);

struct jugadores
{
    string nombre;
} player1, player2;

const string RED = "\033[1;31m";
const string BLUE = "\033[1;34m";
const string RESET = "\033[0m";

int main()
{

    setlocale(LC_ALL, "spanish");
    char matriz[10][10] = {{'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}};
    char matriz2[10][10] = {{'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}};
    char matriz1_ofensiva[10][10] = {{'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}};
    char matriz2_ofensiva[10][10] = {{'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}};
    int ganador = 0;
    int turno = 1;
    int opcion;

    cout << "¡Batalla Naval!" << endl;
    cout << endl;
    cout << "1. Iniciar juego nuevo" << endl;
    cout << "2. Cargar partida guardada" << endl;
    cout << "3. Guardar partida actual" << endl;
    cout << "4. Salir" << endl;
    cout << "Ingrese su opción: ";
    cin >> opcion;

    switch (opcion)
    {
    case 1:
        cout << "Ingrese el nombre del primer jugador: ";
        cin >> player1.nombre;
        cout << "Ingrese el nombre del segundo jugador: ";
        cin >> player2.nombre;

        cout << "Ubicación barcos " << BLUE << player1.nombre << RESET << endl;
        cout << endl;
        ubicarBarcos(matriz, BLUE);
        cout << endl;
        cout << "Ubicación barcos " << RED << player2.nombre << RESET << endl;
        cout << endl;
        ubicarBarcos(matriz2, RED);
        cout << endl;
        cout << "¡Hora de atacar!" << endl;
        ganador = atacar(matriz, matriz2, matriz1_ofensiva, matriz2_ofensiva, turno);

        if (ganador == 1)
        {
            cout << BLUE << "¡¡Felicidades " << player1.nombre << "!!" << RESET << endl;
            cout << "¡¡Has ganado la partida!!" << endl;
        }
        else
        {
            cout << RED << "¡¡Felicidades " << player2.nombre << "!!" << RESET << endl;
            cout << "¡¡Has ganado la partida!!" << endl;
        }
        break;

    case 2:
        if (cargarPartida(player1.nombre, player2.nombre, matriz, matriz2, turno))
        {
            cout << "Partida cargada exitosamente." << endl;
            ganador = atacar(matriz, matriz2, matriz1_ofensiva, matriz2_ofensiva, turno);
            if (ganador == 1)
            {
                cout << BLUE << "¡¡Felicidades " << player1.nombre << "!!" << RESET << endl;
                cout << "¡¡Has ganado la partida!!" << endl;
            }
            else
            {
                cout << RED << "¡¡Felicidades " << player2.nombre << "!!" << RESET << endl;
                cout << "¡¡Has ganado la partida!!" << endl;
            }
        }
        else
        {
            cout << "No se pudo cargar la partida." << endl;
        }
        break;

    case 3:
        guardarPartida(player1.nombre, player2.nombre, matriz, matriz2, turno);
        break;

    case 4:
        cout << "Saliendo del juego. ¡Hasta la próxima!" << endl;
        break;

    default:
        cout << "Opción no válida." << endl;
    }
    return 0;
}

void guardarPartida(const string &nombreJugador1, const string &nombreJugador2, char matriz1[][10], char matriz2[][10], int turno)
{
    ofstream archivo("partidas.txt");
    if (archivo.is_open())
    {
        archivo << nombreJugador1 << endl;
        archivo << nombreJugador2 << endl;
        archivo << turno << endl;
        for (int i = 0; i < 10; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                archivo << matriz1[i][j];
            }
            archivo << endl;
        }
        for (int i = 0; i < 10; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                archivo << matriz2[i][j];
            }
            archivo << endl;
        }
        archivo.close();
        cout << "Partida guardada exitosamente." << endl;
    }
    else
    {
        cout << "No se pudo abrir el archivo para guardar la partida." << endl;
    }
}

void guardarMovimiento(const string &nombreJugador1, const string &nombreJugador2, char matriz1[][10], char matriz2[][10], int turno)
{
    ofstream archivo("movimientos.txt", ios::app);
    if (archivo.is_open())
    {
        archivo << "Turno: " << turno << endl;
        archivo << "Jugador 1: " << nombreJugador1 << endl;
        archivo << "Jugador 2: " << nombreJugador2 << endl;
        archivo << "Tablero del Jugador 1: " << endl;
        for (int i = 0; i < 10; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                archivo << matriz1[i][j];
            }
            archivo << endl;
        }
        archivo << "Tablero del Jugador 2: " << endl;
        for (int i = 0; i < 10; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                archivo << matriz2[i][j];
            }
            archivo << endl;
        }
        archivo.close();
        cout << "Movimiento guardado exitosamente." << endl;
    }
    else
    {
        cout << "No se pudo abrir el archivo para guardar el movimiento." << endl;
    }
}

bool cargarPartida(string &nombreJugador1, string &nombreJugador2, char matriz1[][10], char matriz2[][10], int &turno)
{
    ifstream archivo("partidas.txt");
    if (archivo.is_open())
    {
        getline(archivo, nombreJugador1);
        getline(archivo, nombreJugador2);
        archivo >> turno;
        archivo.ignore();
        for (int i = 0; i < 10; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                archivo >> matriz1[i][j];
            }
        }
        archivo.ignore();
        for (int i = 0; i < 10; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                archivo >> matriz2[i][j];
            }
        }
        archivo.close();
        return true;
    }
    else
    {
        cout << "No se pudo abrir el archivo de partidas guardadas." << endl;
        return false;
    }
}

void ubicarBarcos(char matriz[][10], const string &color)
{
    int x = 0;
    int y = 0;
    int v = 0;
    bool h = true;
    int vector[20];
    int tam;
    char nombre;
    bool elegidos[5] = {false};

    for (int q = 0; q < 5; q++)
    {
        bool repetidos = true;

        cout << "Ingrese que tipo de barco desea poner: " << endl;
        cout << endl;
        cout << " 0. Portaviones (5)" << endl;
        cout << " 1. Fragata (4)" << endl;
        cout << " 2. Crucero (3)" << endl;
        cout << " 3. Submarino (3)" << endl;
        cout << " 4. Destructor (2)" << endl;
        int p = 0;
        cout << endl;
        cout << "  > ";
        cin >> p;
        cout << endl;

        switch (p)
        {
        case 0:
            if (!elegidos[0])
            {
                tam = 5;
                nombre = 'P';
                q = posicionamientoBarcos(matriz, tam, nombre, q, x, y, v, h, color);
                elegidos[0] = true;
                repetidos = false;
            }
            else
            {
                cout << "Ese barco ya está elegido " << endl;
                cout << "Seleccione otro" << endl;
                cout << endl;
                q--;
            }
            break;

        case 1:
            if (!elegidos[1])
            {
                tam = 4;
                nombre = 'F';
                q = posicionamientoBarcos(matriz, tam, nombre, q, x, y, v, h, color);
                elegidos[1] = true;
                repetidos = false;
            }
            else
            {
                cout << "Ese barco ya está elegido " << endl;
                cout << "Seleccione otro" << endl;
                cout << endl;
                q--;
            }

            break;

        case 2:
            if (!elegidos[2])
            {
                tam = 3;
                nombre = 'C';
                q = posicionamientoBarcos(matriz, tam, nombre, q, x, y, v, h, color);
                elegidos[2] = true;
                repetidos = false;
            }
            else
            {
                cout << "Ese barco ya está elegido " << endl;
                cout << "Seleccione otro" << endl;
                cout << endl;
                q--;
            }

            break;

        case 3:
            if (!elegidos[3])
            {
                tam = 3;
                nombre = 'S';
                q = posicionamientoBarcos(matriz, tam, nombre, q, x, y, v, h, color);
                elegidos[3] = true;
                repetidos = false;
            }
            else
            {
                cout << "Ese barco ya está elegido " << endl;
                cout << "Seleccione otro" << endl;
                cout << endl;
                q--;
            }
            break;

        case 4:
            if (!elegidos[4])
            {
                tam = 2;
                nombre = 'D';
                q = posicionamientoBarcos(matriz, tam, nombre, q, x, y, v, h, color);
                repetidos = false;
            }
            else
            {
                cout << "Ese barco ya está elegido " << endl;
                cout << "Seleccione otro" << endl;
                cout << endl;
                q--;
            }
            break;

        default:
            cout << "¡¡Valor inválido!!" << endl;
            cout << endl;
            q--;
            break;
        }
    }
}

int posicionamientoBarcos(char matriz[][10], int tam, char nombre, int q, int x, int y, int v, bool h, const string &color)
{

    cout << "¿En qué posición desea poner su barco?" << endl;
    cout << endl;
    cout << " Posición en filas: " << endl;
    cout << "  > ";
    cin >> x;
    cout << endl;
    cout << " Posición en columnas: " << endl;
    cout << "  > ";
    cin >> y;
    cout << endl;

    cout << "¿Desea posicionarlo en horizontal?" << endl;
    cout << " 0. Sí" << endl;
    cout << " 1. No" << endl;
    cout << "  > ";
    cin >> v;
    cout << endl;

    if (v == 0)
    {
        if (v == 0 && (y + tam - 1) >= 10 || matriz[x][y + (tam - 1)] != 'O')
        {
            cout << "  " << endl;
            cout << " ¡¡Posición ocupada o inválida - Elija otra opción!! " << endl;
            cout << "  " << endl;
            q--;
            return q;
        }
        else
        {
            for (int i = 0; i < tam; i++)
            {
                if (matriz[x][y + i] != 'O')
                {
                    h = false;
                    break;
                }
                h = true;
            }

            if (h == true)
            {
                for (int i = 0; i < tam; i++)
                {
                    matriz[x][y] = nombre;
                    y++;
                }
            }
            else
            {
                cout << "¡¡Posición inválida!!" << endl;
                cout << endl;
                q--;
                return q;
            }
        }
    }
    else if (v != 0)
    {

        if (v != 0 && (x + (tam - 1) >= 10 || matriz[x + (tam - 1)][y] != 'O'))
        {
            cout << "  " << endl;
            cout << " ¡¡Posición ocupada o inválida - Elija otra opción!! " << endl;
            cout << "  " << endl;
            q--;
            return q;
        }
        else
        {

                      for (int i = 0; i < tam; i++)
            {
                if (matriz[x + i][y] != 'O')
                {
                    h = false;
                    break;
                }
                else
                {
                    h = true;
                }
            }

            if (h == true)
            {
                for (int i = 0; i < tam; i++)
                {
                    matriz[x][y] = nombre;
                    x++;
                }
            }
            else
            {
                cout << "¡¡Posición inválida!!" << endl;
                cout << endl;
                q--;
                return q;
            }
        }
    }
    imprimirMatriz(matriz, color);
    return q;
}

int atacar(char matriz1[][10], char matriz2[][10], char matriz1_ofensiva[][10], char matriz2_ofensiva[][10], int &turno)
{
    int contador1 = 0;
    int contador2 = 0;
    int x = 0;
    int y = 0;
    int k = 0;
    int opcionGuardar;

    while (true)
    {
        // Turno del jugador 1
        while (true)
        {
            cout << BLUE << "Turno " << player1.nombre << RESET << endl;
            cout << endl;
            cout << "Ingrese las coordenadas para atacar" << endl;
            cout << "Fila: ";
            cin >> x;
            cout << "Columna: ";
            cin >> y;
            cout << endl;

            if (x >= 10 || y >= 10 || matriz1_ofensiva[x][y] != '*')
            {
                cout << "¡¡Coordenada inválida!!" << endl;
                continue;
            }

            if (matriz2[x][y] == 'O')
            {
                matriz1_ofensiva[x][y] = 'O';
                cout << "¡Has fallado el tiro!" << endl;
                imprimirMatriz(matriz1_ofensiva, BLUE);
                break;
            }
            else
            {
                matriz1_ofensiva[x][y] = 'X';
                cout << "¡Le atinaste!" << endl;
                contador1++;
                imprimirMatriz(matriz1_ofensiva, BLUE);
                if (contador1 == 17)
                    return 1;
            }
        }

        cout << "¿Deseas guardar el movimiento o salir? (1 para guardar, 2 para guardar y salir, 0 para continuar): ";
        cin >> opcionGuardar;
        if (opcionGuardar == 1)
        {
            guardarMovimiento(player1.nombre, player2.nombre, matriz1_ofensiva, matriz2_ofensiva, turno);
        }
        else if (opcionGuardar == 2)
        {
            guardarPartida(player1.nombre, player2.nombre, matriz1_ofensiva, matriz2_ofensiva, turno);
            cout << "Guardando y saliendo del juego." << endl;
            exit(0);
        }

        cout << "Ingrese '0' para continuar" << endl;
        cin >> k;
        turno++;

        // Turno del jugador 2
        while (true)
        {
            cout << RED << "Turno " << player2.nombre << RESET << endl;
            cout << endl;
            cout << "Ingrese las coordenadas para atacar" << endl;
            cout << "Fila: ";
            cin >> x;
            cout << "Columna: ";
            cin >> y;
            cout << endl;

            if (x >= 10 || y >= 10 || matriz2_ofensiva[x][y] != '*')
            {
                cout << "¡¡Coordenada inválida!!" << endl;
                continue;
            }

            if (matriz1[x][y] == 'O')
            {
                matriz2_ofensiva[x][y] = 'O';
                cout << "¡Has fallado el tiro!" << endl;
                imprimirMatriz(matriz2_ofensiva, RED);
                break;
            }
            else
            {
                matriz2_ofensiva[x][y] = 'X';
                cout << "¡Le atinaste!" << endl;
                contador2++;
                imprimirMatriz(matriz2_ofensiva, RED);
                if (contador2 == 17)
                    return 2;
            }
        }

        cout << "¿Deseas guardar el movimiento o salir? (1 para guardar, 2 para guardar y salir, 0 para continuar): ";
        cin >> opcionGuardar;
        if (opcionGuardar == 1)
        {
            guardarMovimiento(player1.nombre, player2.nombre, matriz1_ofensiva, matriz2_ofensiva, turno);
        }
        else if (opcionGuardar == 2)
        {
            guardarPartida(player1.nombre, player2.nombre, matriz1_ofensiva, matriz2_ofensiva, turno);
            cout << "Guardando y saliendo del juego." << endl;
            exit(0);
        }

        cout << "Ingrese '0' para continuar" << endl;
        cin >> k;
        turno++;
    }
}

void imprimirMatriz(char matriz[][10], const string &color)
{
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (matriz[i][j] != 'O')
            {
                cout << color << matriz[i][j] << RESET << " ";
            }
            else
            {
                cout << matriz[i][j] << " ";
            }
        }
        cout << endl;
    }
    cout << endl;
}
